option java_package = "br.com.igorbonadio.likely.lklast";

message Program {
  repeated ImportPackage imported_packages = 1;
  repeated Expression statements = 2;
}

message ImportPackage {
  required string package_name = 1;
  required string package_path = 2;
}

message Expression {
  enum ExpressionType {
    BUILTIN = 0;
    ATTRIBUTION = 1;
    BINARY_OPERATION = 2;
    FUNCTION_CALL = 3;
    RETURN_OPERATOR = 4;
    OBJECT_MESSAGE = 5;
    IF_EXPRESSION = 6;
    FOR_EXPRESSION = 7;
    WHILE_EXPRESSION = 8;
    FUNCTION_DEFINITION = 9;
    ID = 10;
  }

  required ExpressionType type_code = 1;
  optional Builtin builtin = 2;
  optional Attribution attribution = 3;
  optional BinaryOperation binary_operation = 4;
  optional FunctionCall function_call = 5;
  optional Expression return_operator = 6;
  optional ObjectMessage object_message = 7;
  optional IfExpression if_expression = 8;
  optional ForExpression for_expression = 9;
  optional WhileExpression while_expression = 10;
  optional FunctionDefinition function_definition = 11;
  optional string id = 12;
}

message Builtin {
  enum BuiltinType {
    INTEGER = 0;
    REAL = 1;
    STRING = 2;
    BOOLEAN = 3;
    SEQUENCE = 4;
    PAIR = 5;
  }

  required BuiltinType type_code = 1;
  optional int64 integer = 2;
  optional double real = 3;
  optional string string = 4;
  optional bool boolean = 5;
  repeated Expression sequence = 6;
  optional Pair pair = 7;
}

message Pair {
  required Expression key = 1;
  required Expression value = 2;
}

message Attribution {
  required Expression id = 1;
  required Expression value = 2;
}

message BinaryOperation {
  enum OperationType {
    ADD = 0;
    SUB = 1;
    MUL = 2;
    DIV = 3;
    EQL = 4;
    NEQ = 5;
    GEQ = 6;
    LEQ = 7;
    GRE = 8;
    LES = 9;
    STH = 10;
  }
  required int32 operation = 1;
  required Expression lhs = 2;
  required Expression rhs = 3;
}

message FunctionCall {
  required Expression function = 1;
  repeated Expression arguments = 2;
}

message ObjectMessage {
  required Expression object = 1;
  required string message = 2;
}

message IfExpression {
  required Expression condition = 1;
  repeated Expression true_statements = 2;
  repeated Expression false_statements = 3;
}

message ForExpression {
  required string variable = 1;
  required Expression lower_bound = 2;
  required Expression upper_bound = 3;
  repeated Expression statements = 4;
}

message WhileExpression {
  required Expression condition = 1;
  repeated Expression statements = 2;
}

message FunctionDefinition {
  repeated string parameters = 1;
  repeated Expression statements = 2;
}
