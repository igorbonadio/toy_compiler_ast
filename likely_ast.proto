option java_package = "br.com.igorbonadio.likely.lklast";

message Program {
  repeated ImportPackage imported_packages = 1;
  repeated Expression statements = 2;
}

message ImportPackage {
  required string package_name = 1;
  required string package_path = 2;
}

message Expression {
  enum Type {
    ID                       = 0; // Expression{string}

    INTEGER                  = 1;  // Expression{integer}
    REAL                     = 2;  // Expression{real}
    STRING                   = 3;  // Expression{string}
    BOOLEAN                  = 4;  // Expression{boolean}

    SEQUENCE                 = 5;  // Expression{expressions}
    HASH                     = 6;  // Expression{expressions}
    PAIR                     = 7;  // Expression{lhs, rhs}

    ATTRIBUTION              = 8;  // Expression{lhs, rhs}

    ADDITION                 = 9;  // Expression{lhs, rhs}
    SUBTRACTION              = 10; // Expression{lhs, rhs}
    MULTIPLICATION           = 11; // Expression{lhs, rhs}
    DIVISION                 = 12; // Expression{lhs, rhs}

    EQUAL_TO                 = 13; // Expression{lhs, rhs}
    NOT_EQUAL_TO             = 14; // Expression{lhs, rhs}
    GREATER_THAN             = 15; // Expression{lhs, rhs}
    GREATER_THAN_OR_EQUAL_TO = 16; // Expression{lhs, rhs}
    LESS_THAN                = 17; // Expression{lhs, rhs}
    LESS_THAN_OR_EQUAL_TO    = 18; // Expression{lhs, rhs}

    AND                      = 19; // Expression{lhs, rhs}
    OR                       = 20; // Expression{lhs, rhs}
    NOT                      = 21; // Expression{rhs}

    FUNCTION_DEFINITION      = 22; // Expression{strings, block1}
    FUNCTION_CALL            = 23; // Expression{lhs, expressions}
    RETURN                   = 24; // Expression{rhs}

    OBJECT_MESSAGE           = 25; // Expression{lhs, string}

    IF                       = 26; // Expression{rhs, block1, block2}
    FOR                      = 27; // Expression{string, lhs, rhs, block1}
    WHILE                    = 28; // Expression{rhs, block1}
  }

  required Type type              = 1;
  optional int64 integer          = 2;
  optional double real            = 3;
  optional string string          = 4;
  optional bool boolean           = 5;
  repeated Expression expressions = 6;
  optional Expression lhs         = 7;
  optional Expression rhs         = 8;
  repeated string strings         = 9;
  repeated Expression block1      = 10;
  repeated Expression block2      = 11;
}
