option java_package = "br.com.igorbonadio.likely.lklast";

message Program {
  repeated ImportPackage imported_packages = 1;
  repeated Expression statements = 2;
}

message ImportPackage {
  required string package_name = 1;
  required string package_path = 2;
}

message Expression {
  enum Type {
    ID                       = 0; // Expression{string}                        = {name}

    INTEGER                  = 1;  // Expression{integer}                      = {number}
    REAL                     = 2;  // Expression{real}                         = {number}
    STRING                   = 3;  // Expression{string}                       = {text}
    BOOLEAN                  = 4;  // Expression{boolean}                      = {boolean}

    SEQUENCE                 = 5;  // Expression{block_true}                   = {sequence}
    HASH                     = 6;  // Expression{block_true}                   = {sequence_of_pairs}
    PAIR                     = 7;  // Expression{lhs, rhs}                     = {key, value}

    ATTRIBUTION              = 8;  // Expression{lhs, rhs}                     = {container, value}

    ADDITION                 = 9;  // Expression{lhs, rhs}                     = {a, b}
    SUBTRACTION              = 10; // Expression{lhs, rhs}                     = {a, b}
    MULTIPLICATION           = 11; // Expression{lhs, rhs}                     = {a, b}
    DIVISION                 = 12; // Expression{lhs, rhs}                     = {a, b}

    EQUAL_TO                 = 13; // Expression{lhs, rhs}                     = {a, b}
    NOT_EQUAL_TO             = 14; // Expression{lhs, rhs}                     = {a, b}
    GREATER_THAN             = 15; // Expression{lhs, rhs}                     = {a, b}
    GREATER_THAN_OR_EQUAL_TO = 16; // Expression{lhs, rhs}                     = {a, b}
    LESS_THAN                = 17; // Expression{lhs, rhs}                     = {a, b}
    LESS_THAN_OR_EQUAL_TO    = 18; // Expression{lhs, rhs}                     = {a, b}

    AND                      = 19; // Expression{lhs, rhs}                     = {a, b}
    OR                       = 20; // Expression{lhs, rhs}                     = {a, b}
    NOT                      = 21; // Expression{rhs}                          = {a}

    FUNCTION_DEFINITION      = 22; // Expression{strings, block_true}          = {parameters, statements}
    FUNCTION_CALL            = 23; // Expression{lhs, block_true, block_false} = {name, arguments, constructor_block}
    RETURN                   = 24; // Expression{rhs}                          = {value}

    OBJECT_MESSAGE           = 25; // Expression{lhs, string}                  = {object, message}

    IF                       = 26; // Expression{rhs, block_true, block_false} = {condition, block_true, block_false}
    FOR                      = 27; // Expression{string, lhs, rhs, block_true} = {variable, lower_bound, upper_bound, block}
    WHILE                    = 28; // Expression{rhs, block_true}              = {condition, block}

    PROBABILITY              = 29; // Expression{block_true, block_false, rhs} = {joint_variables, conditional_variables, value}
  }

  required Type type              = 1;
  optional int64 integer          = 2;
  optional double real            = 3;
  optional string string          = 4;
  optional bool boolean           = 5;
  optional Expression lhs         = 6;
  optional Expression rhs         = 7;
  repeated string strings         = 8;
  repeated Expression block_true  = 9;
  repeated Expression block_false = 10;
}
